/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.seveniu.crawlClient;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-26")
public class TaskInfo implements org.apache.thrift.TBase<TaskInfo, TaskInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TaskInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("urls", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField PROXY_FIELD_DESC = new org.apache.thrift.protocol.TField("proxy", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField JAVASCRIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("javascript", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField THREAD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("threadNum", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("template", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TEMPLATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("templateType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskInfoTupleSchemeFactory());
  }

  public String id; // required
  public String name; // required
  public String templateId; // required
  public List<String> urls; // required
  public Proxy proxy; // required
  public Javascript javascript; // required
  public int threadNum; // required
  public String template; // required
  public TemplateType templateType; // required
  public int priority; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    TEMPLATE_ID((short)3, "templateId"),
    URLS((short)4, "urls"),
    PROXY((short)5, "proxy"),
    JAVASCRIPT((short)6, "javascript"),
    THREAD_NUM((short)7, "threadNum"),
    TEMPLATE((short)8, "template"),
    TEMPLATE_TYPE((short)9, "templateType"),
    PRIORITY((short)10, "priority");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // TEMPLATE_ID
          return TEMPLATE_ID;
        case 4: // URLS
          return URLS;
        case 5: // PROXY
          return PROXY;
        case 6: // JAVASCRIPT
          return JAVASCRIPT;
        case 7: // THREAD_NUM
          return THREAD_NUM;
        case 8: // TEMPLATE
          return TEMPLATE;
        case 9: // TEMPLATE_TYPE
          return TEMPLATE_TYPE;
        case 10: // PRIORITY
          return PRIORITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __THREADNUM_ISSET_ID = 0;
  private static final int __PRIORITY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("templateId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URLS, new org.apache.thrift.meta_data.FieldMetaData("urls", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PROXY, new org.apache.thrift.meta_data.FieldMetaData("proxy", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "Proxy")));
    tmpMap.put(_Fields.JAVASCRIPT, new org.apache.thrift.meta_data.FieldMetaData("javascript", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "Javascript")));
    tmpMap.put(_Fields.THREAD_NUM, new org.apache.thrift.meta_data.FieldMetaData("threadNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("template", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMPLATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("templateType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "TemplateType")));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskInfo.class, metaDataMap);
  }

  public TaskInfo() {
    this.priority = 0;

  }

  public TaskInfo(
    String id,
    String name,
    String templateId,
    List<String> urls,
    Proxy proxy,
    Javascript javascript,
    int threadNum,
    String template,
    TemplateType templateType,
    int priority)
  {
    this();
    this.id = id;
    this.name = name;
    this.templateId = templateId;
    this.urls = urls;
    this.proxy = proxy;
    this.javascript = javascript;
    this.threadNum = threadNum;
    setThreadNumIsSet(true);
    this.template = template;
    this.templateType = templateType;
    this.priority = priority;
    setPriorityIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskInfo(TaskInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetTemplateId()) {
      this.templateId = other.templateId;
    }
    if (other.isSetUrls()) {
      List<String> __this__urls = new ArrayList<String>(other.urls);
      this.urls = __this__urls;
    }
    if (other.isSetProxy()) {
      this.proxy = other.proxy;
    }
    if (other.isSetJavascript()) {
      this.javascript = other.javascript;
    }
    this.threadNum = other.threadNum;
    if (other.isSetTemplate()) {
      this.template = other.template;
    }
    if (other.isSetTemplateType()) {
      this.templateType = other.templateType;
    }
    this.priority = other.priority;
  }

  public TaskInfo deepCopy() {
    return new TaskInfo(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.templateId = null;
    this.urls = null;
    this.proxy = null;
    this.javascript = null;
    setThreadNumIsSet(false);
    this.threadNum = 0;
    this.template = null;
    this.templateType = null;
    this.priority = 0;

  }

  public String getId() {
    return this.id;
  }

  public TaskInfo setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TaskInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getTemplateId() {
    return this.templateId;
  }

  public TaskInfo setTemplateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

  public void unsetTemplateId() {
    this.templateId = null;
  }

  /** Returns true if field templateId is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateId() {
    return this.templateId != null;
  }

  public void setTemplateIdIsSet(boolean value) {
    if (!value) {
      this.templateId = null;
    }
  }

  public int getUrlsSize() {
    return (this.urls == null) ? 0 : this.urls.size();
  }

  public java.util.Iterator<String> getUrlsIterator() {
    return (this.urls == null) ? null : this.urls.iterator();
  }

  public void addToUrls(String elem) {
    if (this.urls == null) {
      this.urls = new ArrayList<String>();
    }
    this.urls.add(elem);
  }

  public List<String> getUrls() {
    return this.urls;
  }

  public TaskInfo setUrls(List<String> urls) {
    this.urls = urls;
    return this;
  }

  public void unsetUrls() {
    this.urls = null;
  }

  /** Returns true if field urls is set (has been assigned a value) and false otherwise */
  public boolean isSetUrls() {
    return this.urls != null;
  }

  public void setUrlsIsSet(boolean value) {
    if (!value) {
      this.urls = null;
    }
  }

  public Proxy getProxy() {
    return this.proxy;
  }

  public TaskInfo setProxy(Proxy proxy) {
    this.proxy = proxy;
    return this;
  }

  public void unsetProxy() {
    this.proxy = null;
  }

  /** Returns true if field proxy is set (has been assigned a value) and false otherwise */
  public boolean isSetProxy() {
    return this.proxy != null;
  }

  public void setProxyIsSet(boolean value) {
    if (!value) {
      this.proxy = null;
    }
  }

  public Javascript getJavascript() {
    return this.javascript;
  }

  public TaskInfo setJavascript(Javascript javascript) {
    this.javascript = javascript;
    return this;
  }

  public void unsetJavascript() {
    this.javascript = null;
  }

  /** Returns true if field javascript is set (has been assigned a value) and false otherwise */
  public boolean isSetJavascript() {
    return this.javascript != null;
  }

  public void setJavascriptIsSet(boolean value) {
    if (!value) {
      this.javascript = null;
    }
  }

  public int getThreadNum() {
    return this.threadNum;
  }

  public TaskInfo setThreadNum(int threadNum) {
    this.threadNum = threadNum;
    setThreadNumIsSet(true);
    return this;
  }

  public void unsetThreadNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THREADNUM_ISSET_ID);
  }

  /** Returns true if field threadNum is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadNum() {
    return EncodingUtils.testBit(__isset_bitfield, __THREADNUM_ISSET_ID);
  }

  public void setThreadNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THREADNUM_ISSET_ID, value);
  }

  public String getTemplate() {
    return this.template;
  }

  public TaskInfo setTemplate(String template) {
    this.template = template;
    return this;
  }

  public void unsetTemplate() {
    this.template = null;
  }

  /** Returns true if field template is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplate() {
    return this.template != null;
  }

  public void setTemplateIsSet(boolean value) {
    if (!value) {
      this.template = null;
    }
  }

  public TemplateType getTemplateType() {
    return this.templateType;
  }

  public TaskInfo setTemplateType(TemplateType templateType) {
    this.templateType = templateType;
    return this;
  }

  public void unsetTemplateType() {
    this.templateType = null;
  }

  /** Returns true if field templateType is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateType() {
    return this.templateType != null;
  }

  public void setTemplateTypeIsSet(boolean value) {
    if (!value) {
      this.templateType = null;
    }
  }

  public int getPriority() {
    return this.priority;
  }

  public TaskInfo setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TEMPLATE_ID:
      if (value == null) {
        unsetTemplateId();
      } else {
        setTemplateId((String)value);
      }
      break;

    case URLS:
      if (value == null) {
        unsetUrls();
      } else {
        setUrls((List<String>)value);
      }
      break;

    case PROXY:
      if (value == null) {
        unsetProxy();
      } else {
        setProxy((Proxy)value);
      }
      break;

    case JAVASCRIPT:
      if (value == null) {
        unsetJavascript();
      } else {
        setJavascript((Javascript)value);
      }
      break;

    case THREAD_NUM:
      if (value == null) {
        unsetThreadNum();
      } else {
        setThreadNum((Integer)value);
      }
      break;

    case TEMPLATE:
      if (value == null) {
        unsetTemplate();
      } else {
        setTemplate((String)value);
      }
      break;

    case TEMPLATE_TYPE:
      if (value == null) {
        unsetTemplateType();
      } else {
        setTemplateType((TemplateType)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case TEMPLATE_ID:
      return getTemplateId();

    case URLS:
      return getUrls();

    case PROXY:
      return getProxy();

    case JAVASCRIPT:
      return getJavascript();

    case THREAD_NUM:
      return getThreadNum();

    case TEMPLATE:
      return getTemplate();

    case TEMPLATE_TYPE:
      return getTemplateType();

    case PRIORITY:
      return getPriority();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case TEMPLATE_ID:
      return isSetTemplateId();
    case URLS:
      return isSetUrls();
    case PROXY:
      return isSetProxy();
    case JAVASCRIPT:
      return isSetJavascript();
    case THREAD_NUM:
      return isSetThreadNum();
    case TEMPLATE:
      return isSetTemplate();
    case TEMPLATE_TYPE:
      return isSetTemplateType();
    case PRIORITY:
      return isSetPriority();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskInfo)
      return this.equals((TaskInfo)that);
    return false;
  }

  public boolean equals(TaskInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_templateId = true && this.isSetTemplateId();
    boolean that_present_templateId = true && that.isSetTemplateId();
    if (this_present_templateId || that_present_templateId) {
      if (!(this_present_templateId && that_present_templateId))
        return false;
      if (!this.templateId.equals(that.templateId))
        return false;
    }

    boolean this_present_urls = true && this.isSetUrls();
    boolean that_present_urls = true && that.isSetUrls();
    if (this_present_urls || that_present_urls) {
      if (!(this_present_urls && that_present_urls))
        return false;
      if (!this.urls.equals(that.urls))
        return false;
    }

    boolean this_present_proxy = true && this.isSetProxy();
    boolean that_present_proxy = true && that.isSetProxy();
    if (this_present_proxy || that_present_proxy) {
      if (!(this_present_proxy && that_present_proxy))
        return false;
      if (!this.proxy.equals(that.proxy))
        return false;
    }

    boolean this_present_javascript = true && this.isSetJavascript();
    boolean that_present_javascript = true && that.isSetJavascript();
    if (this_present_javascript || that_present_javascript) {
      if (!(this_present_javascript && that_present_javascript))
        return false;
      if (!this.javascript.equals(that.javascript))
        return false;
    }

    boolean this_present_threadNum = true;
    boolean that_present_threadNum = true;
    if (this_present_threadNum || that_present_threadNum) {
      if (!(this_present_threadNum && that_present_threadNum))
        return false;
      if (this.threadNum != that.threadNum)
        return false;
    }

    boolean this_present_template = true && this.isSetTemplate();
    boolean that_present_template = true && that.isSetTemplate();
    if (this_present_template || that_present_template) {
      if (!(this_present_template && that_present_template))
        return false;
      if (!this.template.equals(that.template))
        return false;
    }

    boolean this_present_templateType = true && this.isSetTemplateType();
    boolean that_present_templateType = true && that.isSetTemplateType();
    if (this_present_templateType || that_present_templateType) {
      if (!(this_present_templateType && that_present_templateType))
        return false;
      if (!this.templateType.equals(that.templateType))
        return false;
    }

    boolean this_present_priority = true;
    boolean that_present_priority = true;
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_templateId = true && (isSetTemplateId());
    list.add(present_templateId);
    if (present_templateId)
      list.add(templateId);

    boolean present_urls = true && (isSetUrls());
    list.add(present_urls);
    if (present_urls)
      list.add(urls);

    boolean present_proxy = true && (isSetProxy());
    list.add(present_proxy);
    if (present_proxy)
      list.add(proxy.getValue());

    boolean present_javascript = true && (isSetJavascript());
    list.add(present_javascript);
    if (present_javascript)
      list.add(javascript.getValue());

    boolean present_threadNum = true;
    list.add(present_threadNum);
    if (present_threadNum)
      list.add(threadNum);

    boolean present_template = true && (isSetTemplate());
    list.add(present_template);
    if (present_template)
      list.add(template);

    boolean present_templateType = true && (isSetTemplateType());
    list.add(present_templateType);
    if (present_templateType)
      list.add(templateType.getValue());

    boolean present_priority = true;
    list.add(present_priority);
    if (present_priority)
      list.add(priority);

    return list.hashCode();
  }

  @Override
  public int compareTo(TaskInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateId()).compareTo(other.isSetTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateId, other.templateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrls()).compareTo(other.isSetUrls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urls, other.urls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProxy()).compareTo(other.isSetProxy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProxy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proxy, other.proxy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJavascript()).compareTo(other.isSetJavascript());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJavascript()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.javascript, other.javascript);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThreadNum()).compareTo(other.isSetThreadNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadNum, other.threadNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplate()).compareTo(other.isSetTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.template, other.template);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateType()).compareTo(other.isSetTemplateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateType, other.templateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskInfo(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateId:");
    if (this.templateId == null) {
      sb.append("null");
    } else {
      sb.append(this.templateId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("urls:");
    if (this.urls == null) {
      sb.append("null");
    } else {
      sb.append(this.urls);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("proxy:");
    if (this.proxy == null) {
      sb.append("null");
    } else {
      sb.append(this.proxy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("javascript:");
    if (this.javascript == null) {
      sb.append("null");
    } else {
      sb.append(this.javascript);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("threadNum:");
    sb.append(this.threadNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("template:");
    if (this.template == null) {
      sb.append("null");
    } else {
      sb.append(this.template);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateType:");
    if (this.templateType == null) {
      sb.append("null");
    } else {
      sb.append(this.templateType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    sb.append(this.priority);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (id == null) {
      throw new TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (templateId == null) {
      throw new TProtocolException("Required field 'templateId' was not present! Struct: " + toString());
    }
    if (urls == null) {
      throw new TProtocolException("Required field 'urls' was not present! Struct: " + toString());
    }
    if (proxy == null) {
      throw new TProtocolException("Required field 'proxy' was not present! Struct: " + toString());
    }
    if (javascript == null) {
      throw new TProtocolException("Required field 'javascript' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'threadNum' because it's a primitive and you chose the non-beans generator.
    if (template == null) {
      throw new TProtocolException("Required field 'template' was not present! Struct: " + toString());
    }
    if (templateType == null) {
      throw new TProtocolException("Required field 'templateType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'priority' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskInfoStandardSchemeFactory implements SchemeFactory {
    public TaskInfoStandardScheme getScheme() {
      return new TaskInfoStandardScheme();
    }
  }

  private static class TaskInfoStandardScheme extends StandardScheme<TaskInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateId = iprot.readString();
              struct.setTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.urls = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.urls.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setUrlsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROXY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.proxy = Proxy.findByValue(iprot.readI32());
              struct.setProxyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JAVASCRIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.javascript = Javascript.findByValue(iprot.readI32());
              struct.setJavascriptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // THREAD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.threadNum = iprot.readI32();
              struct.setThreadNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.template = iprot.readString();
              struct.setTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TEMPLATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.templateType = TemplateType.findByValue(iprot.readI32());
              struct.setTemplateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetThreadNum()) {
        throw new TProtocolException("Required field 'threadNum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPriority()) {
        throw new TProtocolException("Required field 'priority' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.templateId != null) {
        oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
        oprot.writeString(struct.templateId);
        oprot.writeFieldEnd();
      }
      if (struct.urls != null) {
        oprot.writeFieldBegin(URLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.urls.size()));
          for (String _iter3 : struct.urls)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.proxy != null) {
        oprot.writeFieldBegin(PROXY_FIELD_DESC);
        oprot.writeI32(struct.proxy.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.javascript != null) {
        oprot.writeFieldBegin(JAVASCRIPT_FIELD_DESC);
        oprot.writeI32(struct.javascript.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(THREAD_NUM_FIELD_DESC);
      oprot.writeI32(struct.threadNum);
      oprot.writeFieldEnd();
      if (struct.template != null) {
        oprot.writeFieldBegin(TEMPLATE_FIELD_DESC);
        oprot.writeString(struct.template);
        oprot.writeFieldEnd();
      }
      if (struct.templateType != null) {
        oprot.writeFieldBegin(TEMPLATE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.templateType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
      oprot.writeI32(struct.priority);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskInfoTupleSchemeFactory implements SchemeFactory {
    public TaskInfoTupleScheme getScheme() {
      return new TaskInfoTupleScheme();
    }
  }

  private static class TaskInfoTupleScheme extends TupleScheme<TaskInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeString(struct.name);
      oprot.writeString(struct.templateId);
      {
        oprot.writeI32(struct.urls.size());
        for (String _iter4 : struct.urls)
        {
          oprot.writeString(_iter4);
        }
      }
      oprot.writeI32(struct.proxy.getValue());
      oprot.writeI32(struct.javascript.getValue());
      oprot.writeI32(struct.threadNum);
      oprot.writeString(struct.template);
      oprot.writeI32(struct.templateType.getValue());
      oprot.writeI32(struct.priority);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.templateId = iprot.readString();
      struct.setTemplateIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.urls = new ArrayList<String>(_list5.size);
        String _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = iprot.readString();
          struct.urls.add(_elem6);
        }
      }
      struct.setUrlsIsSet(true);
      struct.proxy = Proxy.findByValue(iprot.readI32());
      struct.setProxyIsSet(true);
      struct.javascript = Javascript.findByValue(iprot.readI32());
      struct.setJavascriptIsSet(true);
      struct.threadNum = iprot.readI32();
      struct.setThreadNumIsSet(true);
      struct.template = iprot.readString();
      struct.setTemplateIsSet(true);
      struct.templateType = TemplateType.findByValue(iprot.readI32());
      struct.setTemplateTypeIsSet(true);
      struct.priority = iprot.readI32();
      struct.setPriorityIsSet(true);
    }
  }

}

