/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.seveniu.crawlClient;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-25")
public class ResourceInfo implements org.apache.thrift.TBase<ResourceInfo, ResourceInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceInfo");

  private static final org.apache.thrift.protocol.TField MAX_RUNNING_FIELD_DESC = new org.apache.thrift.protocol.TField("maxRunning", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_WAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxWait", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CUR_RUNNING_FIELD_DESC = new org.apache.thrift.protocol.TField("curRunning", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CUR_WAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("curWait", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResourceInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResourceInfoTupleSchemeFactory());
  }

  public int maxRunning; // required
  public int maxWait; // required
  public int curRunning; // required
  public int curWait; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAX_RUNNING((short)1, "maxRunning"),
    MAX_WAIT((short)2, "maxWait"),
    CUR_RUNNING((short)3, "curRunning"),
    CUR_WAIT((short)4, "curWait");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAX_RUNNING
          return MAX_RUNNING;
        case 2: // MAX_WAIT
          return MAX_WAIT;
        case 3: // CUR_RUNNING
          return CUR_RUNNING;
        case 4: // CUR_WAIT
          return CUR_WAIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXRUNNING_ISSET_ID = 0;
  private static final int __MAXWAIT_ISSET_ID = 1;
  private static final int __CURRUNNING_ISSET_ID = 2;
  private static final int __CURWAIT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAX_RUNNING, new org.apache.thrift.meta_data.FieldMetaData("maxRunning", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_WAIT, new org.apache.thrift.meta_data.FieldMetaData("maxWait", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUR_RUNNING, new org.apache.thrift.meta_data.FieldMetaData("curRunning", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUR_WAIT, new org.apache.thrift.meta_data.FieldMetaData("curWait", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceInfo.class, metaDataMap);
  }

  public ResourceInfo() {
  }

  public ResourceInfo(
    int maxRunning,
    int maxWait,
    int curRunning,
    int curWait)
  {
    this();
    this.maxRunning = maxRunning;
    setMaxRunningIsSet(true);
    this.maxWait = maxWait;
    setMaxWaitIsSet(true);
    this.curRunning = curRunning;
    setCurRunningIsSet(true);
    this.curWait = curWait;
    setCurWaitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResourceInfo(ResourceInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.maxRunning = other.maxRunning;
    this.maxWait = other.maxWait;
    this.curRunning = other.curRunning;
    this.curWait = other.curWait;
  }

  public ResourceInfo deepCopy() {
    return new ResourceInfo(this);
  }

  @Override
  public void clear() {
    setMaxRunningIsSet(false);
    this.maxRunning = 0;
    setMaxWaitIsSet(false);
    this.maxWait = 0;
    setCurRunningIsSet(false);
    this.curRunning = 0;
    setCurWaitIsSet(false);
    this.curWait = 0;
  }

  public int getMaxRunning() {
    return this.maxRunning;
  }

  public ResourceInfo setMaxRunning(int maxRunning) {
    this.maxRunning = maxRunning;
    setMaxRunningIsSet(true);
    return this;
  }

  public void unsetMaxRunning() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXRUNNING_ISSET_ID);
  }

  /** Returns true if field maxRunning is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxRunning() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXRUNNING_ISSET_ID);
  }

  public void setMaxRunningIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXRUNNING_ISSET_ID, value);
  }

  public int getMaxWait() {
    return this.maxWait;
  }

  public ResourceInfo setMaxWait(int maxWait) {
    this.maxWait = maxWait;
    setMaxWaitIsSet(true);
    return this;
  }

  public void unsetMaxWait() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXWAIT_ISSET_ID);
  }

  /** Returns true if field maxWait is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxWait() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXWAIT_ISSET_ID);
  }

  public void setMaxWaitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXWAIT_ISSET_ID, value);
  }

  public int getCurRunning() {
    return this.curRunning;
  }

  public ResourceInfo setCurRunning(int curRunning) {
    this.curRunning = curRunning;
    setCurRunningIsSet(true);
    return this;
  }

  public void unsetCurRunning() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRUNNING_ISSET_ID);
  }

  /** Returns true if field curRunning is set (has been assigned a value) and false otherwise */
  public boolean isSetCurRunning() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRUNNING_ISSET_ID);
  }

  public void setCurRunningIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRUNNING_ISSET_ID, value);
  }

  public int getCurWait() {
    return this.curWait;
  }

  public ResourceInfo setCurWait(int curWait) {
    this.curWait = curWait;
    setCurWaitIsSet(true);
    return this;
  }

  public void unsetCurWait() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURWAIT_ISSET_ID);
  }

  /** Returns true if field curWait is set (has been assigned a value) and false otherwise */
  public boolean isSetCurWait() {
    return EncodingUtils.testBit(__isset_bitfield, __CURWAIT_ISSET_ID);
  }

  public void setCurWaitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURWAIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAX_RUNNING:
      if (value == null) {
        unsetMaxRunning();
      } else {
        setMaxRunning((Integer)value);
      }
      break;

    case MAX_WAIT:
      if (value == null) {
        unsetMaxWait();
      } else {
        setMaxWait((Integer)value);
      }
      break;

    case CUR_RUNNING:
      if (value == null) {
        unsetCurRunning();
      } else {
        setCurRunning((Integer)value);
      }
      break;

    case CUR_WAIT:
      if (value == null) {
        unsetCurWait();
      } else {
        setCurWait((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAX_RUNNING:
      return getMaxRunning();

    case MAX_WAIT:
      return getMaxWait();

    case CUR_RUNNING:
      return getCurRunning();

    case CUR_WAIT:
      return getCurWait();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAX_RUNNING:
      return isSetMaxRunning();
    case MAX_WAIT:
      return isSetMaxWait();
    case CUR_RUNNING:
      return isSetCurRunning();
    case CUR_WAIT:
      return isSetCurWait();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResourceInfo)
      return this.equals((ResourceInfo)that);
    return false;
  }

  public boolean equals(ResourceInfo that) {
    if (that == null)
      return false;

    boolean this_present_maxRunning = true;
    boolean that_present_maxRunning = true;
    if (this_present_maxRunning || that_present_maxRunning) {
      if (!(this_present_maxRunning && that_present_maxRunning))
        return false;
      if (this.maxRunning != that.maxRunning)
        return false;
    }

    boolean this_present_maxWait = true;
    boolean that_present_maxWait = true;
    if (this_present_maxWait || that_present_maxWait) {
      if (!(this_present_maxWait && that_present_maxWait))
        return false;
      if (this.maxWait != that.maxWait)
        return false;
    }

    boolean this_present_curRunning = true;
    boolean that_present_curRunning = true;
    if (this_present_curRunning || that_present_curRunning) {
      if (!(this_present_curRunning && that_present_curRunning))
        return false;
      if (this.curRunning != that.curRunning)
        return false;
    }

    boolean this_present_curWait = true;
    boolean that_present_curWait = true;
    if (this_present_curWait || that_present_curWait) {
      if (!(this_present_curWait && that_present_curWait))
        return false;
      if (this.curWait != that.curWait)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_maxRunning = true;
    list.add(present_maxRunning);
    if (present_maxRunning)
      list.add(maxRunning);

    boolean present_maxWait = true;
    list.add(present_maxWait);
    if (present_maxWait)
      list.add(maxWait);

    boolean present_curRunning = true;
    list.add(present_curRunning);
    if (present_curRunning)
      list.add(curRunning);

    boolean present_curWait = true;
    list.add(present_curWait);
    if (present_curWait)
      list.add(curWait);

    return list.hashCode();
  }

  @Override
  public int compareTo(ResourceInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMaxRunning()).compareTo(other.isSetMaxRunning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxRunning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxRunning, other.maxRunning);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxWait()).compareTo(other.isSetMaxWait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxWait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxWait, other.maxWait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurRunning()).compareTo(other.isSetCurRunning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurRunning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curRunning, other.curRunning);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurWait()).compareTo(other.isSetCurWait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurWait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curWait, other.curWait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResourceInfo(");
    boolean first = true;

    sb.append("maxRunning:");
    sb.append(this.maxRunning);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxWait:");
    sb.append(this.maxWait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("curRunning:");
    sb.append(this.curRunning);
    first = false;
    if (!first) sb.append(", ");
    sb.append("curWait:");
    sb.append(this.curWait);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'maxRunning' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'maxWait' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'curRunning' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'curWait' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResourceInfoStandardSchemeFactory implements SchemeFactory {
    public ResourceInfoStandardScheme getScheme() {
      return new ResourceInfoStandardScheme();
    }
  }

  private static class ResourceInfoStandardScheme extends StandardScheme<ResourceInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAX_RUNNING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxRunning = iprot.readI32();
              struct.setMaxRunningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_WAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxWait = iprot.readI32();
              struct.setMaxWaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CUR_RUNNING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.curRunning = iprot.readI32();
              struct.setCurRunningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUR_WAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.curWait = iprot.readI32();
              struct.setCurWaitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMaxRunning()) {
        throw new TProtocolException("Required field 'maxRunning' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMaxWait()) {
        throw new TProtocolException("Required field 'maxWait' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCurRunning()) {
        throw new TProtocolException("Required field 'curRunning' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCurWait()) {
        throw new TProtocolException("Required field 'curWait' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MAX_RUNNING_FIELD_DESC);
      oprot.writeI32(struct.maxRunning);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_WAIT_FIELD_DESC);
      oprot.writeI32(struct.maxWait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUR_RUNNING_FIELD_DESC);
      oprot.writeI32(struct.curRunning);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUR_WAIT_FIELD_DESC);
      oprot.writeI32(struct.curWait);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResourceInfoTupleSchemeFactory implements SchemeFactory {
    public ResourceInfoTupleScheme getScheme() {
      return new ResourceInfoTupleScheme();
    }
  }

  private static class ResourceInfoTupleScheme extends TupleScheme<ResourceInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResourceInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.maxRunning);
      oprot.writeI32(struct.maxWait);
      oprot.writeI32(struct.curRunning);
      oprot.writeI32(struct.curWait);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResourceInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.maxRunning = iprot.readI32();
      struct.setMaxRunningIsSet(true);
      struct.maxWait = iprot.readI32();
      struct.setMaxWaitIsSet(true);
      struct.curRunning = iprot.readI32();
      struct.setCurRunningIsSet(true);
      struct.curWait = iprot.readI32();
      struct.setCurWaitIsSet(true);
    }
  }

}

