/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.seveniu.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-06")
public class Task implements org.apache.thrift.TBase<Task, Task._Fields>, java.io.Serializable, Cloneable, Comparable<Task> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Task");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateId", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("urls", org.apache.thrift.protocol.TType.LIST, (short) 4);
    private static final org.apache.thrift.protocol.TField PROXY_FIELD_DESC = new org.apache.thrift.protocol.TField("proxy", org.apache.thrift.protocol.TType.I32, (short) 5);
    private static final org.apache.thrift.protocol.TField JAVASCRIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("javascript", org.apache.thrift.protocol.TType.I32, (short) 6);
    private static final org.apache.thrift.protocol.TField THREAD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("threadNum", org.apache.thrift.protocol.TType.I32, (short) 7);
    private static final org.apache.thrift.protocol.TField TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("template", org.apache.thrift.protocol.TType.STRING, (short) 8);
    private static final org.apache.thrift.protocol.TField TEMPLATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("templateType", org.apache.thrift.protocol.TType.I32, (short) 9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new TaskStandardSchemeFactory());
        schemes.put(TupleScheme.class, new TaskTupleSchemeFactory());
    }

    public int id; // required
    public String name; // required
    public int templateId; // required
    public List<String> urls; // required
    public int proxy; // required
    public int javascript; // required
    public int threadNum; // required
    public String template; // required
    public int templateType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ID((short) 1, "id"),
        NAME((short) 2, "name"),
        TEMPLATE_ID((short) 3, "templateId"),
        URLS((short) 4, "urls"),
        PROXY((short) 5, "proxy"),
        JAVASCRIPT((short) 6, "javascript"),
        THREAD_NUM((short) 7, "threadNum"),
        TEMPLATE((short) 8, "template"),
        TEMPLATE_TYPE((short) 9, "templateType");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // ID
                    return ID;
                case 2: // NAME
                    return NAME;
                case 3: // TEMPLATE_ID
                    return TEMPLATE_ID;
                case 4: // URLS
                    return URLS;
                case 5: // PROXY
                    return PROXY;
                case 6: // JAVASCRIPT
                    return JAVASCRIPT;
                case 7: // THREAD_NUM
                    return THREAD_NUM;
                case 8: // TEMPLATE
                    return TEMPLATE;
                case 9: // TEMPLATE_TYPE
                    return TEMPLATE_TYPE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __TEMPLATEID_ISSET_ID = 1;
    private static final int __PROXY_ISSET_ID = 2;
    private static final int __JAVASCRIPT_ISSET_ID = 3;
    private static final int __THREADNUM_ISSET_ID = 4;
    private static final int __TEMPLATETYPE_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("templateId", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.URLS, new org.apache.thrift.meta_data.FieldMetaData("urls", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.PROXY, new org.apache.thrift.meta_data.FieldMetaData("proxy", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.JAVASCRIPT, new org.apache.thrift.meta_data.FieldMetaData("javascript", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.THREAD_NUM, new org.apache.thrift.meta_data.FieldMetaData("threadNum", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("template", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TEMPLATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("templateType", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Task.class, metaDataMap);
    }

    public Task() {
    }

    public Task(
            int id,
            String name,
            int templateId,
            List<String> urls,
            int proxy,
            int javascript,
            int threadNum,
            String template,
            int templateType) {
        this();
        this.id = id;
        setIdIsSet(true);
        this.name = name;
        this.templateId = templateId;
        setTemplateIdIsSet(true);
        this.urls = urls;
        this.proxy = proxy;
        setProxyIsSet(true);
        this.javascript = javascript;
        setJavascriptIsSet(true);
        this.threadNum = threadNum;
        setThreadNumIsSet(true);
        this.template = template;
        this.templateType = templateType;
        setTemplateTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Task(Task other) {
        __isset_bitfield = other.__isset_bitfield;
        this.id = other.id;
        if (other.isSetName()) {
            this.name = other.name;
        }
        this.templateId = other.templateId;
        if (other.isSetUrls()) {
            List<String> __this__urls = new ArrayList<String>(other.urls);
            this.urls = __this__urls;
        }
        this.proxy = other.proxy;
        this.javascript = other.javascript;
        this.threadNum = other.threadNum;
        if (other.isSetTemplate()) {
            this.template = other.template;
        }
        this.templateType = other.templateType;
    }

    public Task deepCopy() {
        return new Task(this);
    }

    @Override
    public void clear() {
        setIdIsSet(false);
        this.id = 0;
        this.name = null;
        setTemplateIdIsSet(false);
        this.templateId = 0;
        this.urls = null;
        setProxyIsSet(false);
        this.proxy = 0;
        setJavascriptIsSet(false);
        this.javascript = 0;
        setThreadNumIsSet(false);
        this.threadNum = 0;
        this.template = null;
        setTemplateTypeIsSet(false);
        this.templateType = 0;
    }

    public int getId() {
        return this.id;
    }

    public Task setId(int id) {
        this.id = id;
        setIdIsSet(true);
        return this;
    }

    public void unsetId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
        return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getName() {
        return this.name;
    }

    public Task setName(String name) {
        this.name = name;
        return this;
    }

    public void unsetName() {
        this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
        return this.name != null;
    }

    public void setNameIsSet(boolean value) {
        if (!value) {
            this.name = null;
        }
    }

    public int getTemplateId() {
        return this.templateId;
    }

    public Task setTemplateId(int templateId) {
        this.templateId = templateId;
        setTemplateIdIsSet(true);
        return this;
    }

    public void unsetTemplateId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPLATEID_ISSET_ID);
    }

    /** Returns true if field templateId is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateId() {
        return EncodingUtils.testBit(__isset_bitfield, __TEMPLATEID_ISSET_ID);
    }

    public void setTemplateIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPLATEID_ISSET_ID, value);
    }

    public int getUrlsSize() {
        return (this.urls == null) ? 0 : this.urls.size();
    }

    public java.util.Iterator<String> getUrlsIterator() {
        return (this.urls == null) ? null : this.urls.iterator();
    }

    public void addToUrls(String elem) {
        if (this.urls == null) {
            this.urls = new ArrayList<String>();
        }
        this.urls.add(elem);
    }

    public List<String> getUrls() {
        return this.urls;
    }

    public Task setUrls(List<String> urls) {
        this.urls = urls;
        return this;
    }

    public void unsetUrls() {
        this.urls = null;
    }

    /** Returns true if field urls is set (has been assigned a value) and false otherwise */
    public boolean isSetUrls() {
        return this.urls != null;
    }

    public void setUrlsIsSet(boolean value) {
        if (!value) {
            this.urls = null;
        }
    }

    public int getProxy() {
        return this.proxy;
    }

    public Task setProxy(int proxy) {
        this.proxy = proxy;
        setProxyIsSet(true);
        return this;
    }

    public void unsetProxy() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROXY_ISSET_ID);
    }

    /** Returns true if field proxy is set (has been assigned a value) and false otherwise */
    public boolean isSetProxy() {
        return EncodingUtils.testBit(__isset_bitfield, __PROXY_ISSET_ID);
    }

    public void setProxyIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROXY_ISSET_ID, value);
    }

    public int getJavascript() {
        return this.javascript;
    }

    public Task setJavascript(int javascript) {
        this.javascript = javascript;
        setJavascriptIsSet(true);
        return this;
    }

    public void unsetJavascript() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JAVASCRIPT_ISSET_ID);
    }

    /** Returns true if field javascript is set (has been assigned a value) and false otherwise */
    public boolean isSetJavascript() {
        return EncodingUtils.testBit(__isset_bitfield, __JAVASCRIPT_ISSET_ID);
    }

    public void setJavascriptIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JAVASCRIPT_ISSET_ID, value);
    }

    public int getThreadNum() {
        return this.threadNum;
    }

    public Task setThreadNum(int threadNum) {
        this.threadNum = threadNum;
        setThreadNumIsSet(true);
        return this;
    }

    public void unsetThreadNum() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THREADNUM_ISSET_ID);
    }

    /** Returns true if field threadNum is set (has been assigned a value) and false otherwise */
    public boolean isSetThreadNum() {
        return EncodingUtils.testBit(__isset_bitfield, __THREADNUM_ISSET_ID);
    }

    public void setThreadNumIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THREADNUM_ISSET_ID, value);
    }

    public String getTemplate() {
        return this.template;
    }

    public Task setTemplate(String template) {
        this.template = template;
        return this;
    }

    public void unsetTemplate() {
        this.template = null;
    }

    /** Returns true if field template is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplate() {
        return this.template != null;
    }

    public void setTemplateIsSet(boolean value) {
        if (!value) {
            this.template = null;
        }
    }

    public int getTemplateType() {
        return this.templateType;
    }

    public Task setTemplateType(int templateType) {
        this.templateType = templateType;
        setTemplateTypeIsSet(true);
        return this;
    }

    public void unsetTemplateType() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPLATETYPE_ISSET_ID);
    }

    /** Returns true if field templateType is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateType() {
        return EncodingUtils.testBit(__isset_bitfield, __TEMPLATETYPE_ISSET_ID);
    }

    public void setTemplateTypeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPLATETYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case ID:
                if (value == null) {
                    unsetId();
                } else {
                    setId((Integer) value);
                }
                break;

            case NAME:
                if (value == null) {
                    unsetName();
                } else {
                    setName((String) value);
                }
                break;

            case TEMPLATE_ID:
                if (value == null) {
                    unsetTemplateId();
                } else {
                    setTemplateId((Integer) value);
                }
                break;

            case URLS:
                if (value == null) {
                    unsetUrls();
                } else {
                    setUrls((List<String>) value);
                }
                break;

            case PROXY:
                if (value == null) {
                    unsetProxy();
                } else {
                    setProxy((Integer) value);
                }
                break;

            case JAVASCRIPT:
                if (value == null) {
                    unsetJavascript();
                } else {
                    setJavascript((Integer) value);
                }
                break;

            case THREAD_NUM:
                if (value == null) {
                    unsetThreadNum();
                } else {
                    setThreadNum((Integer) value);
                }
                break;

            case TEMPLATE:
                if (value == null) {
                    unsetTemplate();
                } else {
                    setTemplate((String) value);
                }
                break;

            case TEMPLATE_TYPE:
                if (value == null) {
                    unsetTemplateType();
                } else {
                    setTemplateType((Integer) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case ID:
                return getId();

            case NAME:
                return getName();

            case TEMPLATE_ID:
                return getTemplateId();

            case URLS:
                return getUrls();

            case PROXY:
                return getProxy();

            case JAVASCRIPT:
                return getJavascript();

            case THREAD_NUM:
                return getThreadNum();

            case TEMPLATE:
                return getTemplate();

            case TEMPLATE_TYPE:
                return getTemplateType();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case ID:
                return isSetId();
            case NAME:
                return isSetName();
            case TEMPLATE_ID:
                return isSetTemplateId();
            case URLS:
                return isSetUrls();
            case PROXY:
                return isSetProxy();
            case JAVASCRIPT:
                return isSetJavascript();
            case THREAD_NUM:
                return isSetThreadNum();
            case TEMPLATE:
                return isSetTemplate();
            case TEMPLATE_TYPE:
                return isSetTemplateType();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Task)
            return this.equals((Task) that);
        return false;
    }

    public boolean equals(Task that) {
        if (that == null)
            return false;

        boolean this_present_id = true;
        boolean that_present_id = true;
        if (this_present_id || that_present_id) {
            if (!(this_present_id && that_present_id))
                return false;
            if (this.id != that.id)
                return false;
        }

        boolean this_present_name = true && this.isSetName();
        boolean that_present_name = true && that.isSetName();
        if (this_present_name || that_present_name) {
            if (!(this_present_name && that_present_name))
                return false;
            if (!this.name.equals(that.name))
                return false;
        }

        boolean this_present_templateId = true;
        boolean that_present_templateId = true;
        if (this_present_templateId || that_present_templateId) {
            if (!(this_present_templateId && that_present_templateId))
                return false;
            if (this.templateId != that.templateId)
                return false;
        }

        boolean this_present_urls = true && this.isSetUrls();
        boolean that_present_urls = true && that.isSetUrls();
        if (this_present_urls || that_present_urls) {
            if (!(this_present_urls && that_present_urls))
                return false;
            if (!this.urls.equals(that.urls))
                return false;
        }

        boolean this_present_proxy = true;
        boolean that_present_proxy = true;
        if (this_present_proxy || that_present_proxy) {
            if (!(this_present_proxy && that_present_proxy))
                return false;
            if (this.proxy != that.proxy)
                return false;
        }

        boolean this_present_javascript = true;
        boolean that_present_javascript = true;
        if (this_present_javascript || that_present_javascript) {
            if (!(this_present_javascript && that_present_javascript))
                return false;
            if (this.javascript != that.javascript)
                return false;
        }

        boolean this_present_threadNum = true;
        boolean that_present_threadNum = true;
        if (this_present_threadNum || that_present_threadNum) {
            if (!(this_present_threadNum && that_present_threadNum))
                return false;
            if (this.threadNum != that.threadNum)
                return false;
        }

        boolean this_present_template = true && this.isSetTemplate();
        boolean that_present_template = true && that.isSetTemplate();
        if (this_present_template || that_present_template) {
            if (!(this_present_template && that_present_template))
                return false;
            if (!this.template.equals(that.template))
                return false;
        }

        boolean this_present_templateType = true;
        boolean that_present_templateType = true;
        if (this_present_templateType || that_present_templateType) {
            if (!(this_present_templateType && that_present_templateType))
                return false;
            if (this.templateType != that.templateType)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_id = true;
        list.add(present_id);
        if (present_id)
            list.add(id);

        boolean present_name = true && (isSetName());
        list.add(present_name);
        if (present_name)
            list.add(name);

        boolean present_templateId = true;
        list.add(present_templateId);
        if (present_templateId)
            list.add(templateId);

        boolean present_urls = true && (isSetUrls());
        list.add(present_urls);
        if (present_urls)
            list.add(urls);

        boolean present_proxy = true;
        list.add(present_proxy);
        if (present_proxy)
            list.add(proxy);

        boolean present_javascript = true;
        list.add(present_javascript);
        if (present_javascript)
            list.add(javascript);

        boolean present_threadNum = true;
        list.add(present_threadNum);
        if (present_threadNum)
            list.add(threadNum);

        boolean present_template = true && (isSetTemplate());
        list.add(present_template);
        if (present_template)
            list.add(template);

        boolean present_templateType = true;
        list.add(present_templateType);
        if (present_templateType)
            list.add(templateType);

        return list.hashCode();
    }

    @Override
    public int compareTo(Task other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTemplateId()).compareTo(other.isSetTemplateId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTemplateId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateId, other.templateId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUrls()).compareTo(other.isSetUrls());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUrls()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urls, other.urls);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetProxy()).compareTo(other.isSetProxy());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetProxy()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proxy, other.proxy);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetJavascript()).compareTo(other.isSetJavascript());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetJavascript()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.javascript, other.javascript);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetThreadNum()).compareTo(other.isSetThreadNum());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetThreadNum()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadNum, other.threadNum);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTemplate()).compareTo(other.isSetTemplate());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTemplate()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.template, other.template);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTemplateType()).compareTo(other.isSetTemplateType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTemplateType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateType, other.templateType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Task(");
        boolean first = true;

        sb.append("id:");
        sb.append(this.id);
        first = false;
        if (!first) sb.append(", ");
        sb.append("name:");
        if (this.name == null) {
            sb.append("null");
        } else {
            sb.append(this.name);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("templateId:");
        sb.append(this.templateId);
        first = false;
        if (!first) sb.append(", ");
        sb.append("urls:");
        if (this.urls == null) {
            sb.append("null");
        } else {
            sb.append(this.urls);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("proxy:");
        sb.append(this.proxy);
        first = false;
        if (!first) sb.append(", ");
        sb.append("javascript:");
        sb.append(this.javascript);
        first = false;
        if (!first) sb.append(", ");
        sb.append("threadNum:");
        sb.append(this.threadNum);
        first = false;
        if (!first) sb.append(", ");
        sb.append("template:");
        if (this.template == null) {
            sb.append("null");
        } else {
            sb.append(this.template);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("templateType:");
        sb.append(this.templateType);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
        if (name == null) {
            throw new TProtocolException("Required field 'name' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'templateId' because it's a primitive and you chose the non-beans generator.
        if (urls == null) {
            throw new TProtocolException("Required field 'urls' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'proxy' because it's a primitive and you chose the non-beans generator.
        // alas, we cannot check 'javascript' because it's a primitive and you chose the non-beans generator.
        // alas, we cannot check 'threadNum' because it's a primitive and you chose the non-beans generator.
        if (template == null) {
            throw new TProtocolException("Required field 'template' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'templateType' because it's a primitive and you chose the non-beans generator.
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class TaskStandardSchemeFactory implements SchemeFactory {
        public TaskStandardScheme getScheme() {
            return new TaskStandardScheme();
        }
    }

    private static class TaskStandardScheme extends StandardScheme<Task> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Task struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.id = iprot.readI32();
                            struct.setIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.name = iprot.readString();
                            struct.setNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // TEMPLATE_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.templateId = iprot.readI32();
                            struct.setTemplateIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // URLS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.urls = new ArrayList<String>(_list0.size);
                                String _elem1;
                                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                    _elem1 = iprot.readString();
                                    struct.urls.add(_elem1);
                                }
                                iprot.readListEnd();
                            }
                            struct.setUrlsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // PROXY
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.proxy = iprot.readI32();
                            struct.setProxyIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // JAVASCRIPT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.javascript = iprot.readI32();
                            struct.setJavascriptIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // THREAD_NUM
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.threadNum = iprot.readI32();
                            struct.setThreadNumIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // TEMPLATE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.template = iprot.readString();
                            struct.setTemplateIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // TEMPLATE_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.templateType = iprot.readI32();
                            struct.setTemplateTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetId()) {
                throw new TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetTemplateId()) {
                throw new TProtocolException("Required field 'templateId' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetProxy()) {
                throw new TProtocolException("Required field 'proxy' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetJavascript()) {
                throw new TProtocolException("Required field 'javascript' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetThreadNum()) {
                throw new TProtocolException("Required field 'threadNum' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetTemplateType()) {
                throw new TProtocolException("Required field 'templateType' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Task struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(ID_FIELD_DESC);
            oprot.writeI32(struct.id);
            oprot.writeFieldEnd();
            if (struct.name != null) {
                oprot.writeFieldBegin(NAME_FIELD_DESC);
                oprot.writeString(struct.name);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
            oprot.writeI32(struct.templateId);
            oprot.writeFieldEnd();
            if (struct.urls != null) {
                oprot.writeFieldBegin(URLS_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.urls.size()));
                    for (String _iter3 : struct.urls) {
                        oprot.writeString(_iter3);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(PROXY_FIELD_DESC);
            oprot.writeI32(struct.proxy);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(JAVASCRIPT_FIELD_DESC);
            oprot.writeI32(struct.javascript);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(THREAD_NUM_FIELD_DESC);
            oprot.writeI32(struct.threadNum);
            oprot.writeFieldEnd();
            if (struct.template != null) {
                oprot.writeFieldBegin(TEMPLATE_FIELD_DESC);
                oprot.writeString(struct.template);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(TEMPLATE_TYPE_FIELD_DESC);
            oprot.writeI32(struct.templateType);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TaskTupleSchemeFactory implements SchemeFactory {
        public TaskTupleScheme getScheme() {
            return new TaskTupleScheme();
        }
    }

    private static class TaskTupleScheme extends TupleScheme<Task> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Task struct) throws TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeI32(struct.id);
            oprot.writeString(struct.name);
            oprot.writeI32(struct.templateId);
            {
                oprot.writeI32(struct.urls.size());
                for (String _iter4 : struct.urls) {
                    oprot.writeString(_iter4);
                }
            }
            oprot.writeI32(struct.proxy);
            oprot.writeI32(struct.javascript);
            oprot.writeI32(struct.threadNum);
            oprot.writeString(struct.template);
            oprot.writeI32(struct.templateType);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Task struct) throws TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.id = iprot.readI32();
            struct.setIdIsSet(true);
            struct.name = iprot.readString();
            struct.setNameIsSet(true);
            struct.templateId = iprot.readI32();
            struct.setTemplateIdIsSet(true);
            {
                org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                struct.urls = new ArrayList<String>(_list5.size);
                String _elem6;
                for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
                    _elem6 = iprot.readString();
                    struct.urls.add(_elem6);
                }
            }
            struct.setUrlsIsSet(true);
            struct.proxy = iprot.readI32();
            struct.setProxyIsSet(true);
            struct.javascript = iprot.readI32();
            struct.setJavascriptIsSet(true);
            struct.threadNum = iprot.readI32();
            struct.setThreadNumIsSet(true);
            struct.template = iprot.readString();
            struct.setTemplateIsSet(true);
            struct.templateType = iprot.readI32();
            struct.setTemplateTypeIsSet(true);
        }
    }

}

